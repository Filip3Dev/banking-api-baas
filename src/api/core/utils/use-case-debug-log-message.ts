import { BaseUseCase } from '_core/adapter/interfaces/interfaces'

interface LogMessageParams {
  [key: string]: string | number | boolean | string[]
}

const sortParameters = (unsortedParams) => {
  return Object.keys(unsortedParams)
    .sort()
    .reduce((row, key) => ({ ...row, [key]: unsortedParams[key] }), {})
}

export const generateUseCaseDebugLogMessage = (
  useCaseObject: BaseUseCase,
  step: string,
  params?: LogMessageParams
): string => {
  const messageContents = [`use_case: ${useCaseObject.constructor.name}`, `step: ${step}`]

  if (params) {
    params = sortParameters(params)

    Object.entries(params).forEach(([name, value]) => {
      messageContents.push(`${name}: ${value}`)
    })
  }

  return messageContents.join(' | ')
}

export const steps = {
  account: {
    findAccount: 'find_existing_account',
    getUnblockedAccount: 'get_unblocked_account',
    validateBlockedAccount: 'validate_blocked_account',
    accountNotBlocked: 'account_not_blocked',
    createAccount: 'create_new_account',
    createAccountAtExchange: 'create_new_account_at_exchange',
    createSubAccountAtExchange: 'create_new_sub_account_at_exchange',
    createSubAccountApiKeyAtExchange: 'create_sub_account_API_key_at_exchange',
  },
  fiat: {
    findFiat: 'find_existing_fiat',
  },
  asset: {
    findAssetsWithAccountFavorites: 'find_assets_with_account_favorites',
    findAssetBySymbol: 'find_asset_by_symbol',
    findAssetBySymbolWithCategory: 'find_asset_by_symbol_with_category',
    findNetworksByAsset: 'find_networks_by_asset',
    findFavoriteAsset: 'find_favorite_asset',
    addAssetAsFavorite: 'add_asset_as_favorite',
    removeFavoriteAsset: 'remove_favorite_asset',
    findCreditedAssetsByAccount: 'find_credited_assets_by_account',
    findOneCreditedBySymbolAndAccount: 'find_one_credited_asset_by_symbol_and_account',
    returnAssetsOrderedByCreatedAt: 'return_assets_ordered_by_created_at',
    returnAssetsOrderedByPrice: 'return_assets_ordered_by_price',
    returnAssetsOrderedByBalancePrice: 'return_assets_ordered_by_balance_price',
    returnAssetsOrderedByMarketCap: 'return_assets_ordered_by_market_cap',
    returnAssetsOrderedByVariationPerformance: 'return_assets_ordered_by_variation_performance',
    getPricesPeriodGranularity: 'get_prices_period_granularity',
    getAssetsPrices: 'get_assets_prices',
    convertAssetPriceToBRL: 'convert_asset_price_to_brl',
    getAssetPricesByPeriod: 'get_asset_prices_by_period',
    getAssetNetworksInformation: 'get_asset_networks_information',
    getDepositAddress: 'get_deposit_address',
    getAssetsPriceAndMetadata: 'get_assets_price_and_metadata',
    getAssetPriceAndMetadata: 'get_asset_price_and_metadata',
    setAssetsPriceAndMetadata: 'set_assets_price_and_metadata',
    setAssetTransfersStatuses: 'set_asset_price_transfers_statuses',
    setAssetPriceAndMetadata: 'set_asset_price_and_metadata',
    setAssetBalancePerformance: 'set_asset_balance_performance',
    balancePerformanceSet: 'asset_balance_performance_set',
    assetFoundInAdapters: 'asset_found_in_adapters',
    assetPriceFound: 'asset_price_found',
    calculatedAssetQuantity: 'calculated_asset_quantity',
    findCreditedAssetsFromAccount: 'find_all_credited_assets_from_account',
    assetsBalancePerformanceCalculated: 'assets_balance_performance_calculated',
    validateNetworkCode: 'validate_network_code',
    setWithdrawFeePercentage: 'set_withdraw_fee_percentage',
  },
  transaction: {
    startP2PTransferProcess: 'start_p2p_transfer_process',
    p2pDebitTransfer: 'p2p_debit_transfer',
    p2pCreditTransfer: 'p2p_credit_transfer',
    startBuyAssetProcess: 'start_buy_asset_process',
    startSellAssetProcess: 'start_sell_asset_process',
    startSyncAccountDepositsProcess: 'start_sync_account_deposits_process',
    startWithdrawAssetProcess: 'start_withdraw_asset_process',
    startSyncAccountWithdrawsProcess: 'start_sync_account_withdraws_process',
    getBaseAssetAmount: 'get_base_asset_amount',
    calculatedBaseAssetAmount: 'calculated_base_asset_amount',
    getDigitalAccountFeeDiscountedBaseAssetAmount: 'get_digital_account_fee_discounted_base_asset_amount',
    afterNetQuantityCalculation: 'after_net_quantity_calculation',
    startTransaction: 'start_transaction',
    findTransaction: 'find_transaction',
    completeTransaction: 'complete_transaction',
    transferBRLToBBX: 'transfer_BRL_to_BBX',
    transferBRLToUserAccount: 'transfer_BRL_to_user_account',
    transferBaseAssetFromMasterToSubAccountAtExchange: 'transfer_base_asset_from_master_to_subaccount_at_exchange',
    transferBaseAssetFromSubToMasterAccountAtExchange:
      'transfer_base_asset_from_subaccount_to_master_account_at_exchange',
    transferAssetFromSubToMasterAccountAtExchange: 'transfer_asset_from_subaccount_to_master_account_at_exchange',
    transferAssetBackFromMasterToSubAccountAtExchange: 'transfer_asset_back_from_master_to_subaccount_at_exchange',
    transferFeeFromMasterAccountToColdWallet: 'transfer_fee_from_master_account_to_cold_wallet',
    createOrderAtExchange: 'create_order_at_exchange',
    orderAtExchangeCreated: 'order_at_exchange_created',
    transferRemainder: 'transfer_remainder',
    orderAtExchangeNotNeededToBuyBaseAsset: 'buying_base_asset__no_order_at_exchange_needed',
    getAssetCredit: 'get_asset_credit',
    updateAssetCredit: 'update_asset_credit',
    setNewAssetCredit: 'set_new_asset_credit',
    calculatedTransactionValues: 'calculated_transaction_values',
    validatePin: 'validate_pin',
    validPin: 'pin_is_valid',
    calculatedFeeDiscountedBaseAssetAmount: 'calculated_fee_discounted_base_asset_amount',
    assetToBuyInfo: 'info_about_the_asset_that_is_being_bought',
    balanceIsValid: 'balance_is_valid',
    transactionTotalAndPriceUpdated: 'transaction_total_and_price_updated',
    revertAttemptIncreased: 'revert_attempt_increased',
    revertBaseAssetTransfer: 'revert_base_asset_transfer',
    revertDigitalAccountTransfer: 'revert_digital_account_transfer',
    findAllByAssetAndAccount: 'find_all_transactions_by_asset_and_account',
    findAccountById: 'find_account_by_id',
    getDepositHistory: 'get_deposit_history',
    startProcessingDepositHistory: 'start_processing_deposit_history',
    getWithdrawHistory: 'get_withdraw_history',
    findOneDepositByNetworkTransfer: 'find_deposit_transfer_by_network_transfer',
    findPendingProcessedWithdraws: 'find_pending_processed_withdraws',
    verifyCompletedDepositTransfer: 'verify_completed_deposit_transfer',
    findAssetBySymbol: 'find_asset_by_symbol',
    findNetworkByCode: 'find_network_by_code',
    getCreditToWithdraw: 'get_credit_to_withdraw',
    enoughBalanceToWithdraw: 'enough_balance_to_withdraw',
    notEnoughBalanceToWithdraw: 'not_enough_balance_to_withdraw',
    getNetworkData: 'get_network_data',
    validateWithdrawAmount: 'validate_withdraw_amount',
    executeWithdrawTransfer: 'execute_withdraw_transfer',
    findAllWithTransfersByAssetAndAccount: 'find_all_with_transfers_by_asset_and_account',
    findAllTransactionTypes: 'find_all_transaction_types',
  },
  getCurrentAppSettings: 'get_current_app_settings',
  completeUseCase: 'complete_use_case',
}

export const params = {
  account: {
    externalUserId: 'external_user_id',
    accountId: 'account_id',
    exchangeAccountId: 'exchange_account_id',
    fiatSymbol: 'fiat_symbol',
    fiatId: 'fiat_id',
  },
  asset: {
    assetId: 'asset_id',
    orderBy: 'order_by',
    symbol: 'asset_symbol',
    networks: 'asset_networks',
    networkCode: 'network_code',
    network: 'asset_network',
    refreshRate: 'asset_refresh_rate',
    interval: 'interval',
    period: 'period',
    pair: 'pair',
    price: 'price',
    granularity: 'granularity',
    quantityStep: 'quantity_step',
    balancePrice: 'balance_price',
    variationPerformance: 'variation_performance',
    withdrawFeePercentage: 'withdraw_fee_percentage',
    networkWithdrawFee: 'network_withdraw_fee',
  },
  balancePerformance: {
    totalBalance: 'balance_performance__total_balance',
    investedAmount: 'balance_performance__invested_amount',
    investedVariation: 'balance_performance__invested_variation',
    variationPerformance: 'balance_performance__variation_performance',
    balancesCount: 'balance_performance__balances_count',
  },
  credit: {
    oldBalance: 'credit_old_balance',
    balance: 'credit_balance',
    newBalance: 'credit_new_balance',
    averagePrice: 'credit_average_price',
    newAveragePrice: 'credit_new_average_price',
  },
  transaction: {
    transactionId: 'transaction_id',
    transactionsCount: 'transactionsCount',
    exchangeTransactionId: 'exchange_transaction_id',
    amountBRL: 'amount_in_BRL',
    amount: 'amount',
    feesDiscountedAmount: 'fees_discounted_amount',
    feeAmount: 'fee_amount',
    price: 'transaction_price',
    total: 'transaction_total',
    type: 'transaction_type',
    exchangePrice: 'exchange_price',
    exchangeFee: 'exchange_fee',
    averagePrice: 'transaction_average_price',
    grossBaseAssetAmount: 'gross_base_asset_amount',
    baseAssetAmountDigitalAccountFeeDiscounted: 'gross_base_asset_amount',
    quantity: 'asset_quantity',
    grossQuantity: 'asset_gross_quantity',
    netQuantity: 'asset_net_quantity',
    amountOfBaseAssetToTransferToSubAccount: 'amount_of_base_asset_to_transfer_to_subaccount',
    remainder: 'remainder',
    totalFeeMultiplicationFactor: 'total_fee_multiplication_factor',
    isBuyingBaseAsset: 'is_buying_base_asset',
    isSellingBaseAsset: 'is_selling_base_asset',
    assetPair: 'asset_pair',
    exchangeOrderId: 'exchange_order_id',
    exchangeOrderResponseFills: 'exchange_order_response_fills',
    exchangeOrderResponseExecutedQuantity: 'exchange_order_response_executed_quantity',
    amountBaseAssetEarned: 'amount_base_asset_earned',
    revertAttempts: 'revert_attempts',
    revertStatus: 'revert_status',
    network: 'network',
    address: 'address',
    memo: 'memo',
    digitalAccountWithdrawFee: 'digital_account_withdraw_fee',
    digitalAccountFeeDiscountedAmount: 'digital_account_fee_discounted_amount',
    transferId: 'transfer_id',
    exchangeTransferId: 'exchange_transfer_id',
    operationsCount: 'operations_count',
  },
  transfer: {
    transferId: 'transfer_id',
    amount: 'transfer_amount',
    exchangeStatusId: 'transfer_exchange_status_id',
    averagePrice: 'transfer_average_price',
    networkTransferId: 'network_transfer_id',
    startTime: 'start_time',
    endTime: 'end_time',
    orderIdList: 'order_id_list',
    historyEntryCount: 'history_entry_count',
  },
  network: {
    networkCode: 'network_code',
  },
  sort: 'sort',
}
